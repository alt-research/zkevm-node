# ================================================================================
# Common
# ================================================================================
serviceAccount:
  annotations: {}

# ================================================================================
# Databases
# ================================================================================
psql-state-db:
  enabled: true
  architecture: standalone
  pullPolicy: IfNotPresent
  auth:
    enablePostgresUser: true
    postgresPassword: "password"
    username: "state_user"
    password: "state_password"
    database: "state_db"
  persistence:
    enabled: true
    size: 10Gi
  primary:
    extraEnvVars:
      - name: POSTGRESQL_EXTRA_FLAGS
        value: "-c max_connections=2200 -c shared_buffers=4096MB"
    initdb:
      user: "postgres"
      password: "password"
      scripts:
        init.sql: |
          CREATE DATABASE prover_db;
          \connect prover_db;
          CREATE SCHEMA state;
          CREATE TABLE state.nodes (hash BYTEA PRIMARY KEY, data BYTEA NOT NULL);
          CREATE TABLE state.program (hash BYTEA PRIMARY KEY, data BYTEA NOT NULL);
          CREATE USER prover_user with password 'prover_pass';
          ALTER DATABASE prover_db OWNER TO prover_user;
          ALTER SCHEMA state OWNER TO prover_user;
          ALTER SCHEMA public OWNER TO prover_user;
          ALTER TABLE state.nodes OWNER TO prover_user;
          ALTER TABLE state.program OWNER TO prover_user;
          ALTER USER prover_user SET SEARCH_PATH=state;

psql-pool-db:
  enabled: true
  architecture: standalone
  pullPolicy: IfNotPresent
  auth:
    enablePostgresUser: true
    postgresPassword: "password"
    username: "pool_user"
    password: "pool_password"
    database: "pool_db"
  persistence:
    enabled: true
    size: 10Gi
  primary:
    extraEnvVars:
      - name: POSTGRESQL_EXTRA_FLAGS
        value: "-c max_connections=2200 -c shared_buffers=4096MB"
  
psql-event-db:
  enabled: false
  architecture: standalone
  pullPolicy: IfNotPresent
  auth:
    enablePostgresUser: true
    postgresPassword: "password"
    username: "event_user"
    password: "event_password"
    database: "event_db"
  persistence:
    enabled: true
    size: 10Gi
  primary:
    extraEnvVars:
      - name: POSTGRESQL_EXTRA_FLAGS
        value: "-c max_connections=2200 -c shared_buffers=4096MB"
    initdb:
      user: "postgres"
      password: "password"
      scripts:
        init.sql: |
          CREATE TYPE level_t AS ENUM ('emerg', 'alert', 'crit', 'err', 'warning', 'notice', 'info', 'debug');
          CREATE TABLE public.event (
            id BIGSERIAL PRIMARY KEY,
            received_at timestamp WITH TIME ZONE default CURRENT_TIMESTAMP,
            ip_address inet,
            source varchar(32) not null,
            component varchar(32),
            level level_t not null,
            event_id varchar(32) not null,
            description text,
            data bytea,
            json jsonb
          );
          ALTER TABLE public.event OWNER TO event_user;

psql-explorer-db:
  enabled: true
  architecture: standalone
  pullPolicy: IfNotPresent
  auth:
    enablePostgresUser: true
    postgresPassword: "password"
    username: "l2_explorer_user"
    password: "l2_explorer_password"
    database: "l2_explorer_db"
  persistence:
    enabled: true
    size: 10Gi
  primary:
    extraEnvVars:
      - name: POSTGRESQL_EXTRA_FLAGS
        value: "-c max_connections=2200 -c shared_buffers=4096MB"

psql-bridge-db:
  enabled: true
  architecture: standalone
  pullPolicy: IfNotPresent
  auth:
    enablePostgresUser: true
    postgresPassword: "password"
    username: "test_user"
    password: "test_password"
    database: "test_db"
  persistence:
    enabled: true
    size: 10Gi
  primary:
    extraEnvVars:
      - name: POSTGRESQL_EXTRA_FLAGS
        value: "-c max_connections=2200 -c shared_buffers=4096MB"

# ================================================================================
# Prover: Prover, Executor
# ================================================================================
zkevmProver:
  enabled: true
  image:
    repository: hermeznetwork/zkevm-prover
    tag: v2.0.1
    pullPolicy: IfNotPresent
    pullSecrets: []
  nodeSelector:
    app: "testnet"
  volumeMounts:
    - name: prover-config
      mountPath: /usr/src/app/config.json
      subPath: prover.config.json
  volumes:
    - name: prover-config
      configMap:
        name: jadefalcon-prover-config
  labels:
    app: zkevm-prover
  ports:
    - name: mock-prover
      containerPort: 50052
      protocol: TCP
    - name: mt
      containerPort: 50061
      protocol: TCP
    - name: executor
      containerPort: 50071
      protocol: TCP
  service:
    enabled: true
    labels: {}
    annotations: {}
    type: ClusterIP
    ports:
    - name: mock-prover
      port: 50052
      protocol: TCP
      targetPort: mock-prover
    - name: mt
      port: 50061
      protocol: TCP
      targetPort: mt
    - name: executor
      port: 50071
      protocol: TCP
      targetPort: executor
  command:
    - /bin/sh
    - -c
    - |
      zkProver -c /usr/src/app/config.json

# ================================================================================
# Node: Eth-tx-manager, L2gaspricer, Aggregator
# ================================================================================
zkevmNode:
  enabled: true
  image:
    repository: hermeznetwork/zkevm-node
    tag: v0.2.4
    pullPolicy: IfNotPresent
    pullSecrets: []
  nodeSelector:
    app: "testnet"
  env:
    - name: ZKEVM_NODE_STATEDB_HOST
      value: "jadefalcon-psql-state-db"
    - name: ZKEVM_NODE_POOL_DB_HOST
      value: "jadefalcon-psql-pool-db"
    - name: ZKEVM_NODE_AGGREGATOR_SENDER_ADDRESS
      value: "0x855995bC8218d618ADaB6815a006C4347f6f09fC"
  volumeMounts:
    - name: node-config
      mountPath: /app/config.toml
      subPath: node.config.toml
    - name: genesis-config
      mountPath: /app/genesis.json
      subPath: rendered_genesis.json
    - name: sequencer-keystore
      mountPath: /pk/sequencer.keystore
      subPath: sequencer.keystore
    - name: aggregator-keystore
      mountPath: /pk/aggregator.keystore
      subPath: aggregator.keystore
  volumes:
    - name: node-config
      configMap:
        name: jadefalcon-node-config
    - name: genesis-config
      configMap:
        name: jadefalcon-genesis-configmap
    - name: sequencer-keystore
      configMap:
        name: jadefalcon-sequencer-keystore-configmap
    - name: aggregator-keystore
      configMap:
        name: jadefalcon-aggregator-keystore-configmap
  labels:
    app: zkevm-node
  ports:
    - name: aggregator
      containerPort: 50081
      protocol: TCP
    - name: metrics
      containerPort: 9091
      protocol: TCP
  service:
    enabled: true
    labels: {}
    annotations: {}
    type: ClusterIP
    ports:
    - name: aggregator
      port: 50081
      protocol: TCP
      targetPort: aggregator
    - name: metrics
      port: 9091
      protocol: TCP
      targetPort: metrics
  command:
    - /bin/sh
    - -c
    - |
      /app/zkevm-node run \
      --network custom \
      --custom-network-file /app/genesis.json \
      --cfg /app/config.toml \
      --components eth-tx-manager,l2gaspricer,aggregator

# ================================================================================
# Sequencer: Synchronizer, Sequencer, Sequence Sender
# ================================================================================
zkevmSequencer:
  enabled: true
  image:
    repository: hermeznetwork/zkevm-node
    tag: v0.2.4
    pullPolicy: IfNotPresent
    pullSecrets: []
  nodeSelector:
    app: "testnet"
  env:
    - name: ZKEVM_NODE_STATEDB_HOST
      value: "jadefalcon-psql-state-db"
    - name: ZKEVM_NODE_POOL_DB_HOST
      value: "jadefalcon-psql-pool-db"
    - name: ZKEVM_NODE_SEQUENCER_SENDER_ADDRESS
      value: "0x5F91CEb5601aC666238DB7dc0973E64F6AAC18C3"
  volumeMounts:
    - name: node-config
      mountPath: /app/config.toml
      subPath: node.config.toml
    - name: genesis-config
      mountPath: /app/genesis.json
      subPath: rendered_genesis.json
    - name: sequencer-keystore
      mountPath: /pk/sequencer.keystore
      subPath: sequencer.keystore
  volumes:
    - name: node-config
      configMap:
        name: jadefalcon-node-config
    - name: genesis-config
      configMap:
        name: jadefalcon-genesis-configmap
    - name: sequencer-keystore
      configMap:
        name: jadefalcon-sequencer-keystore-configmap
  labels:
    app: zkevm-sequencer
  ports:
    - name: sequencer
      containerPort: 6060
      protocol: TCP
    - name: metrics
      containerPort: 9091
      protocol: TCP
  service:
    enabled: true
    labels: {}
    annotations: {}
    type: ClusterIP
    ports:
    - name: sequencer
      port: 6060
      protocol: TCP
      targetPort: sequencer
    - name: metrics
      port: 9091
      protocol: TCP
      targetPort: metrics
  command:
    - /bin/sh
    - -c
    - |
      /app/zkevm-node run \
      --network custom \
      --custom-network-file /app/genesis.json \
      --cfg /app/config.toml \
      --components synchronizer,sequencer,sequence-sender

# ================================================================================
# RPC: RPC
# ================================================================================
zkevmRPC:
  enabled: true
  image:
    repository: hermeznetwork/zkevm-node
    tag: v0.2.4
    pullPolicy: IfNotPresent
    pullSecrets: []
  nodeSelector:
    app: "testnet"
  env:
    - name: ZKEVM_NODE_STATEDB_HOST
      value: "jadefalcon-psql-state-db"
    - name: ZKEVM_NODE_POOL_DB_HOST
      value: "jadefalcon-psql-pool-db"
  volumeMounts:
    - name: node-config
      mountPath: /app/config.toml
      subPath: node.config.toml
    - name: genesis-config
      mountPath: /app/genesis.json
      subPath: rendered_genesis.json
  volumes:
    - name: node-config
      configMap:
        name: jadefalcon-node-config
    - name: genesis-config
      configMap:
        name: jadefalcon-genesis-configmap
  labels:
    app: zkevm-node
  ports:
    - name: rpc
      containerPort: 8123
      protocol: TCP
    - name: ws
      containerPort: 8133
      protocol: TCP
    - name: metrics
      containerPort: 9091
      protocol: TCP
  service:
    enabled: true
    labels: {}
    annotations: {}
    type: ClusterIP
    ports:
    - name: rpc
      port: 8123
      protocol: TCP
      targetPort: rpc
    - name: ws
      port: 8133
      protocol: TCP
      targetPort: ws
    - name: metrics
      port: 9091
      protocol: TCP
      targetPort: metrics
  command:
    - /bin/sh
    - -c
    - |
      /app/zkevm-node run \
      --network custom \
      --custom-network-file /app/genesis.json \
      --cfg /app/config.toml \
      --components rpc
  ingress:
    enabled: true
    className: "nginx"
    labels: {}
    annotations: {}
    hosts:
    - host: jadefalcon-polygon-zkevm-rpc.alt.technology
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            port:
              name: rpc
    tls: []

# ================================================================================
# Explorer: Explorer
# ================================================================================
zkevmExplorer:
  enabled: true
  image:
    repository: hermeznetwork/zkevm-explorer
    tag: latest
    pullPolicy: IfNotPresent
    pullSecrets: []
  nodeSelector:
    app: "testnet"
  env:
    - name: NETWORK
      value: "POE"
    - name: SUBNETWORK
      value: "Polygon Hermez"
    - name: COIN
      value: "ETH"
    - name: ETHEREUM_JSONRPC_VARIANT
      value: "geth"
    - name: ETHEREUM_JSONRPC_HTTP_URL
      value: "http://jadefalcon-polygon-zkevm-rpc:8123"
    - name: DATABASE_URL
      value: "postgres://l2_explorer_user:l2_explorer_password@jadefalcon-psql-explorer-db:5432/l2_explorer_db"
    - name: ECTO_USE_SSL
      value: "false"
    - name: MIX_ENV
      value: "prod"
    - name: LOGO
      value: "/images/blockscout_logo.svg"
    - name: LOGO_FOOTER
      value: "/images/blockscout_logo.svg"
  labels:
    app: zkevm-explorer
  ports:
    - name: rpc
      containerPort: 4000
      protocol: TCP
  service:
    enabled: true
    labels: {}
    annotations: {}
    type: ClusterIP
    ports:
    - name: rpc
      port: 4000
      protocol: TCP
      targetPort: rpc
  command:
    - /bin/sh
    - -c
    - "mix do ecto.create, ecto.migrate; mix phx.server"
  ingress:
    enabled: true
    className: "nginx"
    labels: {}
    annotations: {}
    hosts:
    - host: jadefalcon-polygon-zkevm-explorer.alt.technology
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            port:
              name: rpc
    tls: []

# ================================================================================
# Bridge Service: Bridge Service
# ================================================================================
zkevmBridgeSvc:
  enabled: true
  image:
    repository: hermeznetwork/zkevm-bridge-service
    tag: v0.1.0
    pullPolicy: IfNotPresent
    pullSecrets: []
  nodeSelector:
    app: "testnet"
  env:
    - name: NETWORK
      value: "POE"
    - name: ZKEVM_BRIDGE_DATABASE_USER
      value: "test_user"
    - name: ZKEVM_BRIDGE_DATABASE_PASSWORD
      value: "test_password"
    - name: ZKEVM_BRIDGE_DATABASE_NAME
      value: "test_db"
    - name: ZKEVM_BRIDGE_DATABASE_HOST
      value: "jadefalcon-psql-bridge-db"
    - name: ZKEVM_BRIDGE_DATABASE_PORT
      value: "5432"
  volumeMounts:
    - name: node-config
      mountPath: /app/config.toml
      subPath: node.config.toml
    - name: sequencer-keystore
      mountPath: /pk/sequencer.keystore
      subPath: sequencer.keystore
  volumes:
    - name: node-config
      configMap:
        name: jadefalcon-node-config
    - name: sequencer-keystore
      configMap:
        name: jadefalcon-sequencer-keystore-configmap
  labels:
    app: zkevm-bridge-svc
  ports:
    - name: rpc
      containerPort: 8080
      protocol: TCP
  service:
    enabled: true
    labels: {}
    annotations: {}
    type: ClusterIP
    ports:
    - name: rpc
      port: 8080
      protocol: TCP
      targetPort: rpc
  command:
    - /bin/sh
    - -c
    - "/app/zkevm-bridge run --cfg /app/config.toml"
  ingress:
    enabled: true
    className: "nginx"
    labels: {}
    annotations: {}
    hosts:
    - host: jadefalcon-polygon-zkevm-bridge-service.alt.technology
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            port:
              name: rpc
    tls: []

# ================================================================================
# Bridge UI: Bridge UI
# ================================================================================
zkevmBridgeUI:
  enabled: true
  image:
    repository: hermeznetwork/zkevm-bridge-ui
    tag: latest
    pullPolicy: IfNotPresent
    pullSecrets: []
  nodeSelector:
    app: "testnet"
  env:
    - name: ETHEREUM_RPC_URL
      value: "http://34.210.76.86:8545/"
    - name: ETHEREUM_EXPLORER_URL
      value: "http://34.210.76.86:4000/"
    - name: ETHEREUM_BRIDGE_CONTRACT_ADDRESS
      value: "0x2bC38F4612761c18CaeA50Fc4E0A444f8fC12D83"
    - name: ETHEREUM_FORCE_UPDATE_GLOBAL_EXIT_ROOT
      value: "true"
    - name: ETHEREUM_PROOF_OF_EFFICIENCY_CONTRACT_ADDRESS
      value: "0x59e399d3A225EEcC7aD9dde8a8ce461FD61D9Eec"
    - name: POLYGON_ZK_EVM_RPC_URL
      value: "https://jadefalcon-polygon-zkevm-rpc.alt.technology"
    - name: POLYGON_ZK_EVM_EXPLORER_URL
      value: "https://jadefalcon-polygon-zkevm-explorer.alt.technology"
    - name: POLYGON_ZK_EVM_BRIDGE_CONTRACT_ADDRESS
      value: "0x2bC38F4612761c18CaeA50Fc4E0A444f8fC12D83"
    - name: POLYGON_ZK_EVM_NETWORK_ID
      value: "1"
    - name: BRIDGE_API_URL
      value: "https://jadefalcon-polygon-zkevm-bridge-service.alt.technology"
    - name: ENABLE_FIAT_EXCHANGE_RATES
      value: "false"
    - name: ENABLE_OUTDATED_NETWORK_MODAL
      value: "false"
    - name: ENABLE_DEPOSIT_WARNING
      value: "true"
    - name: ENABLE_REPORT_FORM
      value: "false"
  labels:
    app: zkevm-bridge-ui
  ports:
    - name: rpc
      containerPort: 80
      protocol: TCP
  service:
    enabled: true
    labels: {}
    annotations: {}
    type: ClusterIP
    ports:
    - name: rpc
      port: 80
      protocol: TCP
      targetPort: rpc
  command:
    - /bin/sh
    - -c
    - "chmod a+x /app/scripts/deploy.sh && /app/scripts/deploy.sh"
  ingress:
    enabled: true
    className: "nginx"
    labels: {}
    annotations: {}
    hosts:
    - host: jadefalcon-polygon-zkevm-bridge.alt.technology
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            port:
              name: rpc
    tls: []